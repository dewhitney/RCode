tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
set.seed(3)
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(10,60,10),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
set.seed(3)
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(70,120,10),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
set.seed(3)
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(135,185,10),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
set.seed(5)
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(135,185,10),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
)
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(120,180,10),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(1,10,1),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
set.seed(90)
n = 100
p = 200
tuned = data.frame(sigma=1:3, lambda=0, betas=0)
for(sigma in tuned$sigma){
results = data.frame(lambda=seq(5,10,1),SSR=0)
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
obs = group(data.frame(y,x))
for (lambda in results$lambda){
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
SS = sum(SS)
results$SSR[which(results$lambda==lambda)] = SS
}
tuned$lambda[sigma]=min(results$lambda[which(results$SSR==min(results$SSR))])
Betas = train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,tuned$lambda[sigma])[-201]
tuned$betas[sigma]=sum(abs(Betas)>0)
}
tuned
# Simulate data for experiments
rData = function(sigma=1,n=100,p=200){
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
return(data.frame(y,x))
}
# Randomly splitting my data into 10 groups
group=function(x){
n = dim(x)[1]-1
grp = sample(0:n) %/% ((n+1)/10)
labeled = data.frame(grp,x)
return(labeled)
}
# Soft thresholding for penalty step in gradient descent
sft = function(w,lambda){
apply(as.matrix(w),1,
function(x){sign(x)*max((abs(x)-lambda),0)}
)
}
# the gradient function for linear regression
linear = function(x,y,Beta){t(x)%*%(x%*%Beta-y)}
# the gradient function for logistic regression
expit = function(t){1/(1+exp(-t))}
p = function(x,Beta){expit(apply(x,1,function(u){t(u)%*%Beta}))}
logistic = function(x,y,Beta){-t(x)%*%(y-p(x,Beta))} #grad
## Lasso regression by gradient descent
# Inputs:
# x - a numeric data.frame, vector or matrix of predictor variables
# y - a numeric vector the outcome of interest
# grad - the gradient for the desired model (linear, logistic, etc)
# lambda - the penalty tuning parameter. Set=0 gives original glm estimates
# const - if TRUE, fits an intercept
# tol - stopping criteria for convergence
# Outputs:
# coef1,2,... - estimates for the coefficients in the model
# iterations - how many iterations occurred before estimates within tol
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
ifelse(const){Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1];
Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda),
Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda)}
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
return(c(coef=Beta,iterations=i))
}
set.seed(101990)
x = seq(0,1,1/9)
y = x+rnorm(10)
lm(y~0+x);lasso.gd(x,y,linear,lambda=0)
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
ifelse(const,{Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1];
Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda)},
Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda))
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
return(c(coef=Beta,iterations=i))
}
set.seed(101990)
x = seq(0,1,1/9)
y = x+rnorm(10)
lm(y~0+x);lasso.gd(x,y,linear,lambda=0)
ifelse
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
ifelse(const,{Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1]; Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda)},Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda))
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
return(c(coef=Beta,iterations=i))
}
set.seed(101990)
x = seq(0,1,1/9)
y = x+rnorm(10)
lm(y~0+x);lasso.gd(x,y,linear,lambda=0)
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
if(const==TRUE){
Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1]
Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda)
}
if(const==FALSE){
Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda)
}
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
return(c(coef=Beta,iterations=i))
}
set.seed(101990)
x = seq(0,1,1/9)
y = x+rnorm(10)
lm(y~0+x);lasso.gd(x,y,linear,lambda=0)
lm(y~x);lasso.gd(x,y,linear,const=TRUE,lambda=0)
lm(y~x);lasso.gd(x,y,linear,const=TRUE,lambda=0,tol=.0001)
lm(y~x);lasso.gd(x,y,linear,const=TRUE,lambda=0,tol=.00001)
const=FALSE
if(const){2}else{3}
else{3}
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
if(const==TRUE){
Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1]
Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda)
}
else(const==FALSE){
Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda)
}
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
return(c(coef=Beta,iterations=i))
}
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
if(const==TRUE){
Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1]
Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda)
}
else{
Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda)
}
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
return(c(coef=Beta,iterations=i))
}
lm(y~0+x);lasso.gd(x,y,linear,lambda=0,tol=.001)
list(1:3,"blah")
list(numbers=1:3,word="blah")
lasso.gd = function(x,y,grad=linear,lambda,const=FALSE,tol=1e-3){
x = as.matrix(x)
if(const){x = cbind(1,x)} #determines presence of intercept
k = ncol(x) #number of parameters
Beta = numeric(k); t = 1/(max(svd(t(x)%*%x)$d)); i = 0; dBeta = 1
while(dBeta > tol){
Beta0 = Beta
if(const==TRUE){
Beta[1]=Beta0[1] - t*grad(x,y,Beta0)[1]
Beta[-1]=sft(Beta0[-1] - t*grad(x,y,Beta0)[-1], t*lambda)
}
else{
Beta = sft(Beta0 - t*grad(x,y,Beta0), t*lambda)
}
dBeta = norm(Beta0 - Beta,"2")
i = i+1
}
nBetas = sum(Beta>0)
return( list(coefficients=Beta,extra=c(iterations=i,nonZero=nBetas)) )
}
lm(y~0+x);lasso.gd(x,y,linear,lambda=0,tol=.001)
(10-1)/.1
length(seq(1,10,.1))
(10-1)/.2
length(seq(1,10,.2))
which.min
which.min(runif(10))
x = abs(-2:2)
x
which.min(0)
which.min(x)
# Simulate data for experiments
rData = function(sigma=1,n=100,p=200){
x = matrix(rnorm(n*p),nrow=n,ncol=p)
y = rowSums(x[,1:5]) + rnorm(n=n,sd=sigma)
return(data.frame(y,x))
}
rData
head(rData())
getwd()
setwd("C:/Users/dDub/Documents/GitHub/RCode/Biostatistical Computing")
source("HW6cv.r")
cv10f.lasso=function(x,lambda){
obs=tenfolds(x)
SS = numeric(10)
for(i in 0:9){
train=lasso.gd(obs[which(obs$grp != i),3:202],grpd[which(obs$grp != i),2],linear,lambda)[-201]
fit=as.matrix(obs[which(obs$grp == 1),3:202]) %*% as.matrix(train)
y=as.matrix(obs[which(obs$grp == 1),2])
SS[i+1]=sum((y-fit)^2)
}
return(c(Lambda=lambda,SSR=sum(SS))
}
source("HW6cv.r")
rm(list=ls())
source("HW6cv.r")
args(do.one())
args(do.one
)
set.seed(17); do.one(s=1,l=120,u=140,d=1)
source("HW6cv.r")
set.seed(17); do.one(s=1,l=120,u=140,d=1)
source("HW6cv.r")
set.seed(17); do.one(s=1,l=120,u=140,d=1)
X = rData()
cv10f.lasso(X, lambda=133)
source("HW6cv.r")
set.seed(17); do.one(s=1,l=120,u=140,d=1)
set.seed(17); do.one(s=1,l=120,u=140,d=1)
cv10f.lasso(X, lambda=133)
cv10f.lasso(X, lambda=132)
cv10f.lasso(X, lambda=131)
cv10f.lasso(X, lambda=65)
cv10f.lasso(X, lambda=150)
cv10f.lasso(X, lambda=6)
cv10f.lasso(X, lambda=2)
cv10f.lasso(X, lambda=7)
cv10f.lasso(X, lambda=10)
cv10f.lasso(X, lambda=6.5)
source('~/GitHub/RCode/Biostatistical Computing/HW6cv.r')
set.seed(17); do.one(s=1,l=120,u=140,d=1)
source('~/GitHub/RCode/Biostatistical Computing/HW6cv.r')
set.seed(17); do.one(s=1,l=120,u=140,d=1)
set.seed(17); do.one(s=1,l=1,u=10,d=1)
set.seed(17); do.one(s=1,l=3,u=20,d=1)
B=10
replicate(B,do.one(s=2,l=20,u=30,d=1))
replicate(B,do.one(s=1,l=3,u=8,d=1))
set.seed(509)
answer = data.frame(s=1:5,lambda=0,correct=0)
lambda = 1
for(s in 1:5){
vars = 6
Data=rData(sigma=s)
while(vars < 5){
lambda = lambda+1
fit = lasso.gd(Data[,-1],Data[,1],grad=linear,lambda)$coefficients
vars = sum(fit>0)
correct = sum(fit[1:5]>0)
answer$lambda = lambda
answer$correct = correct
}
}
answer
set.seed(509)
answer = data.frame(s=1:5,lambda=0,correct=0)
lambda = 1
for(s in 1:5){
vars = 6
Data=rData(sigma=s)
while(vars > 5){
lambda = lambda+1
fit = lasso.gd(Data[,-1],Data[,1],grad=linear,lambda)$coefficients
vars = sum(fit>0)
correct = sum(fit[1:5]>0)
answer$lambda = lambda
answer$correct = correct
}
}
answer
answer = data.frame(s=1:5,lambda=0,correct=0)
for(s in 1:5){
vars = 6
Data=rData(sigma=s)
lambda = 1
while(vars > 5){
lambda = lambda+1
fit = lasso.gd(Data[,-1],Data[,1],grad=linear,lambda)$coefficients
vars = sum(fit>0)
correct = sum(fit[1:5]>0)
answer$lambda = lambda
answer$correct = correct
}
}
answer
set.seed(509)
answer = data.frame(s=1:5,lambda=0,correct=0)
for(s in 1:5){
vars = 6
Data=rData(sigma=s)
lambda = 1
while(vars > 5){
lambda = lambda+1
fit = lasso.gd(Data[,-1],Data[,1],grad=linear,lambda)$coefficients
vars = sum(fit>0)
}
correct = sum(fit[1:5]>0)
answer$lambda = lambda
answer$correct = correct
}
answer
set.seed(509)
answer = data.frame(s=1:5,lambda=0,correct=0)
for(s in 1:5){
vars = 6
Data=rData(sigma=s)
lambda = 1
while(vars > 5){
lambda = lambda+1
fit = lasso.gd(Data[,-1],Data[,1],grad=linear,lambda)$coefficients
vars = sum(fit>0)
}
correct = sum(fit[1:5]>0)
answer$lambda[s] = lambda
answer$correct[s] = correct
}
answer
do.one(s=1,l=3,u=21,d=3)
B=10
meanResults = data.frame(Lambda=numeric(3), Variables=numeric(3))
for(i in 1:3){
meanResults[i,]=apply(replicate(B,do.one(s=i,l=3,u=99,d=3)),1,mean)
}
apply(replicate(1,do.one(s=3,l=40,u=60,d=5)),1,mean)
